# estimate pi using a monte-carlo algorithm! #
dig numPoints plant 10000000
dig numInCircle plant 0
repeat numPoints {
    math.random() => x math.random() => y
    if x**2 + y**2 < 1 {
        numInCircle++
    }
}
holler("pi ~ '4 * numInCircle / numPoints'!")
# I got 3.1415992 after 10000000 runs, which is decent #

# estimate derivatives and integrals given a function #

# sample function f #
dig f plant tool(x) x**2

# get approx. derivative given function, x value, and delta x (_h) #
dig getDerivative plant tool(f, x, _h) {
    harvest (f(x + _h) - f(x)) / _h
}

# get approx. integral given function, a, b, and number of terms in sum (n) #
dig getIntegral plant tool(f, a, b, n) {
    dig sum plant 0
    for 1 => i, i <= n, i++ {
        sum += f(a + (b - a) * i/n)
    }
    harvest sum * (b - a)/n
}

holler(getDerivative(f, 3, 0.0001)) # 6.0001 ~ 6 = f'(3) #
holler(getIntegral(f, 0, 3, 10000)) # 9.0014 ~ 9 = (0->3)Int f(x)dx #